-- Task 6: Implement Partitioning

-- Method 1: Create new partitioned tables from scratch

-- Create partitioned Booking table
CREATE TABLE Booking_partitioned (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    property_id INTEGER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
PARTITION BY RANGE (YEAR(start_date) * 100 + MONTH(start_date)) (
    PARTITION p202301 VALUES LESS THAN (202302),
    PARTITION p202302 VALUES LESS THAN (202303),
    PARTITION p202303 VALUES LESS THAN (202304),
    PARTITION p202304 VALUES LESS THAN (202305),
    PARTITION p202305 VALUES LESS THAN (202306),
    PARTITION p202306 VALUES LESS THAN (202307),
    PARTITION p202307 VALUES LESS THAN (202308),
    PARTITION p202308 VALUES LESS THAN (202309),
    PARTITION p202309 VALUES LESS THAN (202310),
    PARTITION p202310 VALUES LESS THAN (202311),
    PARTITION p202311 VALUES LESS THAN (202312),
    PARTITION p202312 VALUES LESS THAN (202401),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Create partitioned Payment table
CREATE TABLE Payment_partitioned (
    id SERIAL PRIMARY KEY,
    booking_id INTEGER NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50),
    status VARCHAR(50) DEFAULT 'completed'
)
PARTITION BY RANGE (YEAR(payment_date)) (
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p2025 VALUES LESS THAN (2026),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Method 2: Alter existing tables to add partitioning

-- Partition the Booking table by start_date (monthly partitions for better granularity)
-- Drop existing partitioning if it exists
ALTER TABLE Booking REMOVE PARTITIONING;

-- Create monthly partitions based on start_date
ALTER TABLE Booking PARTITION BY RANGE (YEAR(start_date) * 100 + MONTH(start_date)) (
    PARTITION p202301 VALUES LESS THAN (202302),
    PARTITION p202302 VALUES LESS THAN (202303),
    PARTITION p202303 VALUES LESS THAN (202304),
    PARTITION p202304 VALUES LESS THAN (202305),
    PARTITION p202305 VALUES LESS THAN (202306),
    PARTITION p202306 VALUES LESS THAN (202307),
    PARTITION p202307 VALUES LESS THAN (202308),
    PARTITION p202308 VALUES LESS THAN (202309),
    PARTITION p202309 VALUES LESS THAN (202310),
    PARTITION p202310 VALUES LESS THAN (202311),
    PARTITION p202311 VALUES LESS THAN (202312),
    PARTITION p202312 VALUES LESS THAN (202401),
    PARTITION p202401 VALUES LESS THAN (202402),
    PARTITION p202402 VALUES LESS THAN (202403),
    PARTITION p202403 VALUES LESS THAN (202404),
    PARTITION p202404 VALUES LESS THAN (202405),
    PARTITION p202405 VALUES LESS THAN (202406),
    PARTITION p202406 VALUES LESS THAN (202407),
    PARTITION p202407 VALUES LESS THAN (202408),
    PARTITION p202408 VALUES LESS THAN (202409),
    PARTITION p202409 VALUES LESS THAN (202410),
    PARTITION p202410 VALUES LESS THAN (202411),
    PARTITION p202411 VALUES LESS THAN (202412),
    PARTITION p202412 VALUES LESS THAN (202501),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Partition the Payment table by payment_date (quarterly partitions)
ALTER TABLE Payment PARTITION BY RANGE (YEAR(payment_date)) (
    PARTITION p2023_q1 VALUES LESS THAN (2023-04-01),
    PARTITION p2023_q2 VALUES LESS THAN (2023-07-01),
    PARTITION p2023_q3 VALUES LESS THAN (2023-10-01),
    PARTITION p2023_q4 VALUES LESS THAN (2024-01-01),
    PARTITION p2024_q1 VALUES LESS THAN (2024-04-01),
    PARTITION p2024_q2 VALUES LESS THAN (2024-07-01),
    PARTITION p2024_q3 VALUES LESS THAN (2024-10-01),
    PARTITION p2024_q4 VALUES LESS THAN (2025-01-01),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Query to show partition information
SELECT TABLE_NAME, PARTITION_NAME, TABLE_ROWS, AVG_ROW_LENGTH, DATA_LENGTH
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME IN ('Booking', 'Payment')
ORDER BY TABLE_NAME, PARTITION_NAME;

-- Test partition pruning with a date range query
EXPLAIN SELECT * FROM Booking
WHERE start_date BETWEEN '2024-01-01' AND '2024-01-31';

-- Show which partitions are being used
SELECT PARTITION_NAME, TABLE_ROWS
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 'Booking'
AND PARTITION_NAME LIKE 'p2024%'
ORDER BY PARTITION_NAME;
